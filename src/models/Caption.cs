using System.Windows.Automation;
using System.Text;
using System.ComponentModel;
using System.Runtime.CompilerServices;

using LiveCaptionsTranslator.controllers;

namespace LiveCaptionsTranslator.models
{
    public class Caption : INotifyPropertyChanged
    {
        private static Caption? instance = null;
        public event PropertyChangedEventHandler? PropertyChanged;

        private static readonly char[] PUNC_EOS = ".?!。？！".ToCharArray();
        private static readonly char[] PUNC_COMMA = ",，、—\n".ToCharArray();

        private string presentedCaption = "";
        private string originalCaption = "";
        private string translatedCaption = "";

        private readonly Queue<CaptionLogItem> captionLog = new(5);

        public class CaptionLogItem
        {
            public string PresentedCaptionLog { get; set; }
            public string TranslatedCaptionLog { get; set; }
        }
        public IEnumerable<CaptionLogItem> CaptionHistory => captionLog.Reverse();
        public static event Action? TranslationLogged;

        public bool PauseFlag { get; set; } = false;
        public bool TranslateFlag { get; set; } = false;
        public bool LogonlyFlag { get; set; } = false;

        public string PresentedCaption
        {
            get => presentedCaption;
            set
            {
                presentedCaption = value;
                OnPropertyChanged("PresentedCaption");
            }
        }
        public string OriginalCaption
        {
            get => originalCaption;
            set
            {
                originalCaption = value;
                OnPropertyChanged("OriginalCaption");
            }
        }
        public string TranslatedCaption
        {
            get => translatedCaption;
            set
            {
                translatedCaption = value;
                OnPropertyChanged("TranslatedCaption");
            }
        }

        private Caption() { }

        public static Caption GetInstance()
        {
            if (instance != null)
                return instance;
            instance = new Caption();
            return instance;
        }

        public void OnPropertyChanged([CallerMemberName] string propName = "")
        {
            PropertyChanged?.Invoke(this, new PropertyChangedEventArgs(propName));
        }

        public void Sync()
        {
            int idleCount = 0;
            int syncCount = 0;
            string captionLatest = "--------------------";

            while (true)
            {
                if (PauseFlag || App.Window == null)
                {
                    Thread.Sleep(1000);
                    continue;
                }

                bool captionTrim = false; // Is caption textbox change to another sentence
                string fullText = GetCaptions(App.Window).Trim();
                if (string.IsNullOrEmpty(fullText))
                    continue;
                foreach (char eos in PUNC_EOS)
                    fullText = fullText.Replace($"{eos}\n", $"{eos}");

                // Get the last sentence.
                int lastEOSIndex;
                if (Array.IndexOf(PUNC_EOS, fullText[^1]) != -1)
                    lastEOSIndex = fullText[0..^1].LastIndexOfAny(PUNC_EOS);
                else
                    lastEOSIndex = fullText.LastIndexOfAny(PUNC_EOS);
                string latestCaption = fullText.Substring(lastEOSIndex + 1);

                // If the last sentence is too short, extend it by adding the previous sentence.
                while (lastEOSIndex > 0 && Encoding.UTF8.GetByteCount(latestCaption) < 10)
                {
                    captionTrim = true;

                    lastEOSIndex = fullText[0..lastEOSIndex].LastIndexOfAny(PUNC_EOS);
                    latestCaption = fullText.Substring(lastEOSIndex + 1);
                }

                // Replace the excessive \n generated by LiveCaptions with -- to ensure coherence.
                latestCaption = latestCaption.Replace("\n", "——");

                string newPresentedCaption = latestCaption;
                // If the last sentence is too long, truncate it when displayed.
                while (Encoding.UTF8.GetByteCount(newPresentedCaption) > 150)
                {
                    captionTrim = true;

                    int commaIndex = newPresentedCaption.IndexOfAny(PUNC_COMMA);
                    if (commaIndex < 0 || commaIndex + 1 == newPresentedCaption.Length)
                        break;
                    newPresentedCaption = newPresentedCaption.Substring(commaIndex + 1);
                }

                if (PresentedCaption.CompareTo(newPresentedCaption) != 0)
                {
                    idleCount = 0;
                    syncCount++;

                    PresentedCaption = newPresentedCaption;
                    OriginalCaption = latestCaption;

                    // When EOS is included, translate only the part before EOS.
                    int EOSIndex = OriginalCaption.IndexOfAny(PUNC_EOS);
                    if (EOSIndex != -1)
                    {
                        OriginalCaption = OriginalCaption[0..(EOSIndex + 1)];
                        captionTrim = true;
                    }

                    if (Array.IndexOf(PUNC_EOS, OriginalCaption[^1]) != -1)
                    {
                        syncCount = 0;
                        TranslateFlag = true;
                        captionTrim = true;
                    }
                    else if (Array.IndexOf(PUNC_COMMA, OriginalCaption[^1]) != -1)
                    {
                        syncCount = 0;
                        TranslateFlag = true;
                        captionTrim = true;
                    }

                    // Push current caption to history without waiting for async
                    if (captionTrim)
                    {
                        string _OriginalCaption = OriginalCaption.Substring(2, OriginalCaption.Length - 2).ToLower();
                        string _captionLatest = captionLatest.Substring(2, captionLatest.Length - 2).ToLower();
                        if (_OriginalCaption != _captionLatest) // Prevent from spamming
                        {
                            Task.Run(() => HistoryCapture(OriginalCaption));
                            captionLatest = OriginalCaption;
                        }
                    }
                }
                else
                    idleCount++;

                if (syncCount > App.Settings.MaxSyncInterval ||
                    idleCount == App.Settings.MaxIdleInterval)
                {
                    syncCount = 0;
                    TranslateFlag = true;
                }

                Thread.Sleep(50);
            }
        }

        private async Task HistoryCapture(string original)
        {
            string translated = "";
            string targetLanguage = App.Settings.TargetLanguage;
            string apiName = App.Settings.ApiName;
            bool captionLog = App.Settings.EnableCaptionLog;

            if (!LogonlyFlag) // Log only mode no translate
            {
                var controller = new TranslationController();
                translated = await controller.Translate(original);
            }

            // Add caption log card
            if (captionLog)
            {
                if (this.captionLog.Count >= 5)
                    this.captionLog.Dequeue();
                this.captionLog.Enqueue(new CaptionLogItem
                {
                    PresentedCaptionLog = original,
                    TranslatedCaptionLog = translated
                });
                OnPropertyChanged(nameof(CaptionHistory));
            }

            // Insert history database
            try
            {
                if (LogonlyFlag) // Log only mode no translate
                {
                    SQLiteHistoryLogger.LogTranslation(original, "N/A", "N/A", "LogOnly");
                }
                else
                    SQLiteHistoryLogger.LogTranslation(original, translated, targetLanguage, apiName);
                TranslationLogged?.Invoke();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"[Error] Logging history failed: {ex.Message}");
            }
        }

        public async Task Translate()
        {
            var controller = new TranslationController();
            while (true)
            {
                for (int pauseCount = 0; PauseFlag; pauseCount++)
                {
                    if (pauseCount > 60 && App.Window != null)
                    {
                        App.Window = null;
                        LiveCaptionsHandler.KillLiveCaptions();
                    }
                    Thread.Sleep(1000);
                }

                if (LogonlyFlag)
                {
                    TranslatedCaption = "";
                    TranslateFlag = false;
                }
                else if (TranslateFlag)
                {
                    TranslatedCaption = await controller.Translate(OriginalCaption);
                    TranslateFlag = false;
                }
                Thread.Sleep(50);
            }
        }

        public void ClearCaptionLog()
        {
            captionLog.Clear();
            OnPropertyChanged(nameof(CaptionHistory));
        }

        public static string GetCaptions(AutomationElement window)
        {
            var captionsTextBlock = LiveCaptionsHandler.FindElementByAId(window, "CaptionsTextBlock");
            if (captionsTextBlock == null)
                return string.Empty;
            return captionsTextBlock.Current.Name;
        }
    }
}
